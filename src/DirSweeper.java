import java.io.BufferedWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Stream;

public class DirSweeper {

    public static void main(String[] args) throws IOException {
        if (args.length < 1) {
            printHelp();
            return;
        }

        String command = args[0];

        switch (command) {
            case "init":
                String fileName = args.length > 1 ? args[1] : "structure.broom";
                generateBoilerplate(fileName);
                break;

            case "apply":
                if (args.length < 2) {
                    System.err.println("Please specify a .broom file to apply.");
                    return;
                }

                String broomPath = args[1];
                boolean confirmExecution = hasFlag(args, "-y", "--yes");
                boolean keepFile = hasFlag(args, "-keep");

                if (!broomPath.endsWith(".broom")) {
                    System.err.println("Invalid file type. Please use a .broom file.");
                    return;
                }

                List<BroomCommand> commands = BroomParser.parseFile(broomPath);
                System.out.println("=== Preview of actions from " + broomPath + " ===");
                previewCommands(commands);

                if (!confirmExecution) {
                    System.out.println("\nThis is a preview only.");
                    System.out.println("To apply the changes, run:");
                    System.out.println("  java -jar dirsweeper.jar apply " + broomPath + " -y");
                    return;
                }

                System.out.println("\nApplying .broom commands...\n");
                CommandExecutor.execute(commands);

                if (!keepFile) {
                    Files.deleteIfExists(Paths.get(broomPath));
                    System.out.println("Deleted .broom file: " + broomPath);
                } else {
                    System.out.println("Kept .broom file as requested.");
                }

                break;

            default:
                System.err.println("Unknown command: " + command);
                printHelp();
        }
    }

    private static boolean hasFlag(String[] args, String... flags) {
        for (String arg : args) {
            for (String flag : flags) {
                if (arg.equals(flag)) return true;
            }
        }
        return false;
    }

    private static void printHelp() {
        System.out.println("ðŸ§¹ dirsweeper - Directory structure tool powered by .broom files");
        System.out.println();
        System.out.println("Usage:");
        System.out.println("  java -jar dirsweeper.jar init [filename]");
        System.out.println("      â†’ Create a new .broom file with the current folder structure");
        System.out.println();
        System.out.println("  java -jar dirsweeper.jar apply <file> [-y] [-keep]");
        System.out.println("      â†’ Apply a .broom file (preview by default)");
        System.out.println("      â†’ Use -y or --yes to execute");
        System.out.println("      â†’ Use -keep to preserve the .broom file");
        System.out.println();
        System.out.println("Commands in .broom:");
        System.out.println("  new (n) <dir>");
        System.out.println("  rename (rn) [-r] <src> <dest>");
        System.out.println("  move (m) [-r] <src> <dest>");
        System.out.println("  delete (d) [-r] <target>");
    }

    private static void generateBoilerplate(String fileName) throws IOException {
        try (BufferedWriter writer = Files.newBufferedWriter(Paths.get(fileName))) {
            writer.write("# broomfile generated by dirsweeper\n");
            writer.write("# Commands: new (n), rename (rn), move (m), delete (d)\n\n");
            writer.write("# Example:\n");
            writer.write("# new src/\n");
            writer.write("# rn oldName newName\n");
            writer.write("# rn -r old_(.*) new_$1\n");
            writer.write("# m file.txt newFolder/file.txt\n");
            writer.write("# d -r temp.*\n\n");
            writer.write("# Current folder structure:\n");
            listCurrentDirectoryStructure(writer, Paths.get("."));
        }

        System.out.println("âœ… Generated: " + fileName);
    }

    private static void listCurrentDirectoryStructure(BufferedWriter writer, Path root) throws IOException {
        try (Stream<Path> paths = Files.walk(root)) {
            for (Path path : (Iterable<Path>) paths::iterator) {
                if (path.equals(root)) continue;
                Path relPath = root.relativize(path);
                String line = "# new ./" + relPath.toString().replace("\\", "/");
                if (Files.isDirectory(path)) {
                    line += "/";
                }
                writer.write(line + "\n");
            }
        }
    }


    private static void previewCommands(List<BroomCommand> commands) throws IOException {
        Path root = Paths.get(".");

        for (BroomCommand cmd : commands) {
            switch (cmd.getType()) {
                case CREATE:
                    System.out.println("Will create: " + cmd.getSource());
                    break;

                case RENAME:
                case MOVE:
                    if (cmd.isRegex()) {
                        try (Stream<Path> paths = Files.walk(root)) {
                            paths
                                    .filter(Files::exists)
                                    .forEach(path -> {
                                        String relPath = root.relativize(path).toString().replace("\\", "/");
                                        if (relPath.matches(cmd.getSource())) {
                                            String targetPath = relPath.replaceAll(cmd.getSource(), cmd.getDestination());
                                            System.out.println("Will " + (cmd.getType() == CommandType.MOVE ? "move" : "rename") +
                                                    ": " + relPath + " â†’ " + targetPath);
                                        }
                                    });
                        }
                    } else {
                        System.out.println("Will " + (cmd.getType() == CommandType.MOVE ? "move" : "rename") +
                                ": " + cmd.getSource() + " â†’ " + cmd.getDestination());
                    }
                    break;

                case DELETE:
                    if (cmd.isRegex()) {
                        try (Stream<Path> paths = Files.walk(root)) {
                            paths
                                    .sorted(Comparator.reverseOrder())
                                    .forEach(path -> {
                                        String relPath = root.relativize(path).toString().replace("\\", "/");
                                        if (relPath.matches(cmd.getSource())) {
                                            System.out.println("Will delete: " + relPath);
                                        }
                                    });
                        }
                    } else {
                        System.out.println("Will delete: " + cmd.getSource());
                    }
                    break;
            }
        }
    }

}
